---
# Number of datasets used in training and test. EchoBay can handle multiple datasets
num_datasets : 1
num_datasets_train: 1
num_datasets_test: 1

# Path to the data folder
train_data : "./datafolder/TrainData.csv"
train_label : "./datafolder/TrainLabel.csv"
train_sampling: "./datafolder/TrainSampling.csv"
eval_data : "./datafolder/ValData.csv"
eval_label: "./datafolder/ValLabel.csv"
eval_sampling: "./datafolder/ValSampling.csv"
test_data : "./datafolder/TestData.csv"
test_label : "./datafolder/TestLabel.csv"
test_sampling: "./datafolder/TestSampling.csv"

# Problem definition
Problem_Definition : {type: "Regression", Fitness_Function: "MSA"}
# Fitness level that stops the execution
early_stop : 100
# Number of evaluations for each set of hyper-parameters
Guesses: 5
# Block size used for Readout accumulation
blockStep: 1000
# Penalty loss on memory occupied by the Reservoir (~0-0.2)
Memory_Optimization_Coeff: 0.05
# ESN topology 0 Random, 1 Small World, 2 Cyclic Jump
ESNType: 0

# Optimizable parameters
input_dimension_layer : 5
# Index is used to map Limbo vector to desired range
Nr : {type : "dynamic", index : 0, upper_bound : 150, lower_bound : 30}
leaky : {type: "dynamic", index: 1, upper_bound: 1, lower_bound: 0.1}
# rho scaling defines how the Reservoir is scaled to remain stable. Default is spectral radius
rho : {type: "dynamic", , index: 2, scaling: "radius", upper_bound: 1, lower_bound: 0.1}
# scaleIn count determines if the input signals are scaled altogether or separately. Minimum value is 2 due to fixed bias input
scaleIn : {type: "dynamic", index: 3, count: 2, upper_bound: 1, lower_bound: 0.05}
density :  {type: "dynamic", index: 4, upper_bound: 0.05, lower_bound: 0.02}
# Number of Edges or Jumps (for topologies different from Random)
edgesJumps: {type: "fixed", value: 0}

# Number of optimizable general parameters
input_dimension_general : 0
lambda : {type : "fixed", value : 0}
# Number of layers
Nl : {type: "fixed", value: 1}
# Washout Sample to ignore after each reset of the reservoir
washout_sample : {type : "fixed", value: 100}

# Number of threads used in the initial random sampling
sample_threads : 1
# Number of threads used by eigen for parallelizing the computation
eigen_threads : 4
...